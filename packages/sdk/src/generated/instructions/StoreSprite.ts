/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { StoreSpriteArgs, storeSpriteArgsBeet } from '../types/StoreSpriteArgs';

/**
 * @category Instructions
 * @category StoreSprite
 * @category generated
 */
export type StoreSpriteInstructionArgs = {
  storeSpriteArgs: StoreSpriteArgs;
};
/**
 * @category Instructions
 * @category StoreSprite
 * @category generated
 */
export const StoreSpriteStruct = new beet.FixableBeetArgsStruct<
  StoreSpriteInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['storeSpriteArgs', storeSpriteArgsBeet],
  ],
  'StoreSpriteInstructionArgs',
);
/**
 * Accounts required by the _StoreSprite_ instruction
 *
 * @property [_writable_] escrow Escrow account
 * @property [] baseMint Mint account of the base token
 * @property [] spriteMint Mint account of the sprite token
 * @property [] spriteMintSrc Source account of the sprite token
 * @property [] spriteMintDst Destination account of the sprite token
 * @property [_writable_, **signer**] payer The creator of the account and manager of the sprite
 * @property [_writable_] spritePda The PDA for sprite data
 * @property [] splToken Token program
 * @property [] splAssociatedToken Associated token account program
 * @category Instructions
 * @category StoreSprite
 * @category generated
 */
export type StoreSpriteInstructionAccounts = {
  escrow: web3.PublicKey;
  baseMint: web3.PublicKey;
  spriteMint: web3.PublicKey;
  spriteMintSrc: web3.PublicKey;
  spriteMintDst: web3.PublicKey;
  payer: web3.PublicKey;
  spritePda: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  splToken: web3.PublicKey;
  splAssociatedToken: web3.PublicKey;
};

export const storeSpriteInstructionDiscriminator = 1;

/**
 * Creates a _StoreSprite_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category StoreSprite
 * @category generated
 */
export function createStoreSpriteInstruction(
  accounts: StoreSpriteInstructionAccounts,
  args: StoreSpriteInstructionArgs,
  programId = new web3.PublicKey('spritZMFNZQ5axFCT5woqtcxKLTMNupnyowh4qXWhKy'),
) {
  const [data] = StoreSpriteStruct.serialize({
    instructionDiscriminator: storeSpriteInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.escrow,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.baseMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.spriteMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.spriteMintSrc,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.spriteMintDst,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.spritePda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.splToken,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.splAssociatedToken,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
