/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import * as beet from '@metaplex-foundation/beet';
import { Key, keyBeet } from '../types/Key';
import { Sprite, spriteBeet } from '../types/Sprite';

/**
 * Arguments used to create {@link SpriteAccount}
 * @category Accounts
 * @category generated
 */
export type SpriteAccountArgs = {
  key: Key;
  baseMint: web3.PublicKey;
  sprites: Sprite[];
};
/**
 * Holds the data for the {@link SpriteAccount} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class SpriteAccount implements SpriteAccountArgs {
  private constructor(
    readonly key: Key,
    readonly baseMint: web3.PublicKey,
    readonly sprites: Sprite[],
  ) {}

  /**
   * Creates a {@link SpriteAccount} instance from the provided args.
   */
  static fromArgs(args: SpriteAccountArgs) {
    return new SpriteAccount(args.key, args.baseMint, args.sprites);
  }

  /**
   * Deserializes the {@link SpriteAccount} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [SpriteAccount, number] {
    return SpriteAccount.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link SpriteAccount} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<SpriteAccount> {
    const accountInfo = await connection.getAccountInfo(address, commitmentOrConfig);
    if (accountInfo == null) {
      throw new Error(`Unable to find SpriteAccount account at ${address}`);
    }
    return SpriteAccount.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey('spritZMFNZQ5axFCT5woqtcxKLTMNupnyowh4qXWhKy'),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, spriteAccountBeet);
  }

  /**
   * Deserializes the {@link SpriteAccount} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [SpriteAccount, number] {
    return spriteAccountBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link SpriteAccount} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return spriteAccountBeet.serialize(this);
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link SpriteAccount} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: SpriteAccountArgs) {
    const instance = SpriteAccount.fromArgs(args);
    return spriteAccountBeet.toFixedFromValue(instance).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link SpriteAccount} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: SpriteAccountArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(SpriteAccount.byteSize(args), commitment);
  }

  /**
   * Returns a readable version of {@link SpriteAccount} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      key: 'Key.' + Key[this.key],
      baseMint: this.baseMint.toBase58(),
      sprites: this.sprites,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const spriteAccountBeet = new beet.FixableBeetStruct<SpriteAccount, SpriteAccountArgs>(
  [
    ['key', keyBeet],
    ['baseMint', beetSolana.publicKey],
    ['sprites', beet.array(spriteBeet)],
  ],
  SpriteAccount.fromArgs,
  'SpriteAccount',
);
